                                      Recursion Assignment

Qs1. Given an integer, find out the sum of its digits using recursion.
Input: n = 1234
Output: 10
Explanation: 1+2+3+4=10
Code: public class SumOfDigits {
	public static int sumOfDigitsRec(int num) {
		if(num<=0) {
			return 0;
		}
		
		return (num%10) + sumOfDigitsRec(num/10);
	}

	public static void main(String[] args) {
		int num = 1234;
		int result = sumOfDigitsRec(num);
		System.out.print("The sum of digits of numbers is: "+result);
	}
}

Qs2. Given a number n. Find the sum of natural numbers till n but with alternative signs.
That means if n = 5 then you have to return 1-2+3-4+5=3 as your answer.
Constraints: 0<=n<=1e6
Input1: n=10
Output1: -5
Explanation: 1-2+3-4+5-6+7-8+9-10=-5
Input2: n=5
Output2: 3
Code: 
public class SumOfNaturalNumSign {
	//Function definition
	public static int sumOfNaturalNumSign(int n) {
		if(n<=0) {
			return 0;
		}
		
		if(n%2==0) {
			return sumOfNaturalNumSign(n-1) - n;
		}
		else {
			return sumOfNaturalNumSign(n-1) + n;
		}
	}

	public static void main(String[] args) {
		int n=10;
		//Function call
		int result = sumOfNaturalNumSign(n);
		System.out.println("Sum of natural numbers till n: "+result);
	}
}

Qs3. Print the max value of the array [13,1,-3,22,5].
Code:
import java.util.Arrays;

public class MaxValueRecursion {

    public static int findMaxValue(int[] arr, int index) {
        if (index == arr.length - 1) {
            return arr[index];
        }

        int maxSubarray = findMaxValue(arr, index + 1);
        return Math.max(arr[index], maxSubarray);
    }

    public static void main(String[] args) {
        int[] arr = {13, 1, -3, 22, 5};
        int maxValue = findMaxValue(arr, 0);
        System.out.println("The maximum value in the array is: " + maxValue);
    }
}

Qs4. Find the sum of the value of the array [92,23,15,-20,10].
Code:
public class ArraySumRecursion {

    public static int sumArray(int[] arr, int index) {
        if (index == arr.length) {
            return 0;
        } else {
            return arr[index] + sumArray(arr, index + 1);
        }
    }

    public static void main(String[] args) {
        int[] arr = {92, 23, 15, -20, 10};
        int sum = sumArray(arr, 0);
        System.out.println("The sum of the array is: " + sum);
    }
}

Qs5. Given a number n. Print if it is an Armstrong number or not. An Armstrong number is a number if the sum of every digit in that number raised to the power of total digits in that number is equal to the number.
Example: 152 = 1^3+5^3+3^3= 1 + 125 + 27 = 153 hence 153 is an Armstrong number.(Easy)
Input1; 153
Output1: Yes
Input2: 134
Output2: No
Code:
import java.util.Scanner;

public class ArmstrongNumber {

    public static int countDigits(int num) {
        if (num == 0) {
            return 0;
        } else {
            return 1 + countDigits(num / 10);
        }
    }

    public static int calculateSum(int num, int digits) {
        if (num == 0) {
            return 0;
        } else {
            int lastDigit = num % 10;
            return (int) Math.pow(lastDigit, digits) + calculateSum(num / 10, digits);
        }
    }

    public static boolean isArmstrongNumber(int num) {
        int digits = countDigits(num);
        int sum = calculateSum(num, digits);
        return num == sum;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a number: ");
        int num = scanner.nextInt();

        if (isArmstrongNumber(num)) {
            System.out.println("Yes");
        } else {
            System.out.println("No");
        }
    }
}
