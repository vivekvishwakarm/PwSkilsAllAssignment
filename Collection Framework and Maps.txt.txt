                                           Collection Framework and Maps
Qs1. What is the Collection framework in Java?
Ans: The Collection framework in Java is a set of interfaces and classes that provide a unified architecture for representing and manipulating collections of objects. It offers a variety of data structures like lists, sets, and maps, along with algorithms to perform common operations on them.
Key components of the Collection framework:
Interfaces:
These define the contracts for different types of collections, like List, Set, Queue, and Map.
Implementations:
These are concrete classes that implement the interfaces, providing specific data structures like ArrayList, LinkedList, HashSet, TreeSet, HashMap, and TreeMap.

Qs2. What is the difference between ArryList and LinkedList? 
Ans: When it comes to collections in Java, ArrayList and LinkedList are two popular choices. While they share some similarities, they have distinct differences. ArrayList is a resizable array-based implementation, which provides fast access and searching capabilities. On the other hand, LinkedList is a doubly-linked list implementation, which offers efficient insertion and deletion operations. Generally, if you need fast iteration and random access, ArrayList is a better choice. However, if you frequently add or remove elements from the middle of the list, LinkedList might be a more suitable option.  

Qs3. What is the difference between Iterator and Enumeration?
Ans: In Java, iterators and enumerations are both cursors that can be used to iterate over elements in collection framework interfaces. However, they have some key differences:
Enumeration
An interface that's only applicable for legacy classes like Vector, HashTable, and Stack. It provides single direction iteration and can only perform read operations. Enumeration has been present in Java since version 1.0.
Iterator
A universal cursor that can be applied to any collection object. It provides single direction iteration and can perform both read and remove operations. Iterators are designed to easily change the collections that they loop through. The remove() method can remove items from a collection while looping. Iterator has been present in Java since 1.2. In modern Java programming, iterators are preferred over enumerations as they provide more control, flexibility, and functionality.

Qs4. What is the difference between Iterator and ListIterator?
Ans: Iterator
The Iterator interface is part of the Java Collections Framework and provides a generic way to traverse collections such as lists, sets, and queues. Here are the key characteristics of an Iterator:
Forward-only traversal: An Iterator allows sequential access to elements in a collection in a forward direction.
Read and remove operations: It offers methods like next() to retrieve the next element and remove() to remove the last element returned by the next() method.
Limited functionality: Unlike ListIterator, the Iterator interface does not support bidirectional traversal or modification of elements during iteration.
ListIterator
The ListIterator interface extends the Iterator interface and provides additional functionality specifically designed for lists. Here are the key characteristics of a ListIterator:
Bidirectional traversal: Unlike Iterator, ListIterator allows traversing the list in both forward and backward directions.
Read, remove, replace, and add operations: ListIterator supports all the operations of Iterator, along with methods like hasPrevious(), previous(), set(), and add(). These methods enable modifications to the list during iteration.

Qs5. What is the difference between List and Set?
Ans:In Java, both List and Set are interfaces that belong to the Collections framework, but they have distinct characteristics and use cases:
1. Duplicates:
List:
Allows duplicate elements. You can add the same element multiple times to a list.
Set:
Does not allow duplicate elements. If you try to add a duplicate, it will be ignored.
2. Order:
List:
Maintains the insertion order of elements. The order in which you add elements is preserved.
Set:
Does not guarantee any specific order. The order of elements may vary depending on the implementation.
3. Indexing:
List:
Supports index-based access. You can access elements using their position in the list with the get(index) method.
Set:
Does not support index-based access. You cannot directly access elements using their position.
4. Implementations:
List: Common implementations include ArrayList, LinkedList, and Vector.
Set: Common implementations include HashSet, TreeSet, and LinkedHashSet.
Choosing between List and Set:
Use List when:
You need to maintain the order of elements.
You need to access elements by their position.
Duplicate elements are allowed or required.
Use Set when:
You need to ensure uniqueness of elements.
Order is not important.
You want to perform set operations like union, intersection, and difference.

Qs6. What is the difference between HashSet and TreeSet?
Ans: In Java, a HashSet and a TreeSet are both data structures that implement the Set interface, but they have some key differences:
Backing: A HashSet is backed by a HashMap, while a TreeSet is backed by a TreeMap.
Purpose: A HashSet stores unique elements, while a TreeSet implements sorted sets.
Ordering: A HashSet stores objects in random order, while a TreeSet uses the natural order of the elements.
Null objects: A HashSet can store null objects, but a TreeSet cannot.
Performance: A HashSet is generally faster than a TreeSet.
Implemented methods: A TreeSet has additional methods.

Qs7. What is the difference between Array and ArrayList?
Ans: Here are some differences between arrays and ArrayLists in Java:
Size
Arrays are fixed-size data structures, while ArrayLists are variable-length collections. When creating an array, you must specify the size of its elements, but you don't need to specify the size of an ArrayList. You can also add or remove elements from an ArrayList, but not from an array.
Flexibility
ArrayLists are more flexible than arrays because they allow you to add and remove elements, sort, and search. However, inserting and deleting elements from an ArrayList can be time-consuming, especially when resizing or shifting elements.
Space
Arrays have a fixed amount of space, while ArrayLists can resize, which affects their space complexity.
Indexing
In an array, each element has an index that starts at 0 and goes up to one less than the array's total length

Qs8. What is the Map in Java?
Ans: In Java, a Map is an interface in the java.util package that represents a collection of key-value pairs. It provides a way to store data where each unique key is associated with a value.
Key Characteristics:
Key-Value Pairs:
A Map stores data as entries, where each entry consists of a key and its corresponding value.
Unique Keys:
Each key in a Map must be unique. Duplicate keys are not allowed.
No Order Guarantee:
The order of entries in a Map is not guaranteed, unless you use a specific implementation that maintains order (like LinkedHashMap).
Efficient Retrieval:
Map implementations provide efficient mechanisms to retrieve values based on their keys.
Common Implementations:
HashMap:
The most commonly used implementation. It provides fast access to elements using hashing.
LinkedHashMap:
Maintains insertion order of elements.
TreeMap:
Sorts elements based on their keys' natural ordering or a custom comparator.
Hashtable:
Legacy synchronized implementation. Use ConcurrentHashMap for thread-safe operations.
Basic Operations:
put(key, value): Inserts a key-value pair into the map.
get(key): Retrieves the value associated with the specified key.
remove(key): Removes the key-value pair associated with the specified key.
containsKey(key): Checks if the map contains the specified key.
containsValue(value): Checks if the map contains the specified value.
size(): Returns the number of key-value pairs in the map.
isEmpty(): Checks if the map is empty.

Qs9. What are the commonly used implementations of Map in Java?
Ans:  Java offers several implementations of the Map interface, each with its own strengths and use cases:
HashMap:
The most commonly used implementation. It provides fast lookups and insertions using a hash table. However, it does not guarantee any specific order of the elements.
TreeMap:
This implementation stores keys in sorted order, allowing for efficient range queries. It uses a red-black tree internally.
LinkedHashMap:
Maintains the insertion order of elements. It offers slightly slower performance than HashMap but provides predictable iteration order.
Hashtable:
Similar to HashMap, but it is synchronized, making it thread-safe. However, the synchronization overhead makes it slower than HashMap in single-threaded environments.

Qs10. What is the difference between HashMap and TreeMap?
Ans: HashMap and TreeMap are two popular implementations of the Map interface in Java. The primary difference between them is the way they store and retrieve key-value pairs. A HashMap uses a hash table to store its elements, which allows for constant time complexity for most operations. On the other hand, a TreeMap uses a balanced binary search tree to store its elements, resulting in a logarithmic time complexity for most operations. This makes HashMap suitable for frequent lookups and inserts, while TreeMap is more suitable for sorted data access.  

Qs11. How do you check if a key exists in a Map in Java?
Ans: Checking if a Key Exists in a Java Map
To check if a key exists in a Map in Java, use the containsKey() method. Â  
This method is defined in the Map interface, so it's available for all Map implementations (like HashMap, TreeMap, etc.).
Example:
import java.util.HashMap;
import java.util.Map;

public class MapExample {
    public static void main(String[] args) {
        Map<String, Integer> Â  
 myMap = new HashMap<>();
        myMap.put("apple", Â  
 5);
        myMap.put("banana", 3);

        String keyToCheck = "orange";

        if (myMap.containsKey(keyToCheck)) {
            System.out.println("Key exists in the map");
        } else {
            System.out.println("Key does not exist in the map");
        }
    }
}