                                        -:Encapsulation, Constructor and static keyword in Java Assignment:-
Qs1. What is a Constructor?
Ans: In Java, a constructor is a special method that is automatically called when an object of a class is created. It is used to initialize the object's attributes with default or provided values.

Qs2. What is Constructor Chaining?
Ans: Constructor chaining in Java is the process of calling one constructor from another constructor within the same class or from a superclass. It's a way to reuse code and avoid redundancy in object initialization.
There are two types of constructor chaining in Java:
Within the same class:
This is achieved using the this() keyword. The this() keyword refers to the current object and can be used to call another constructor in the same class.
From the base class:
This is achieved using the super() keyword. The super() keyword refers to the immediate parent class object and can be used to call a constructor in the parent class.

Qs3. Can we call a subclass constructor from a superclass constructor?
Ans: No. We cannot call a subclass constructor from a superclass constructor.

Qs4. What happens if you keep a return type for a constructor?
Ans: In Java, constructors don't have an explicit return type, and they always use the name of the class they're declared in. Adding a return type to a constructor turns it into a class method. Specifying a different return type than the class type results in a compilation error.

Qs5. What is no argument constructor?
Ans: n Java, a no-argument constructor is a constructor that takes no arguments. It's also known as a default constructor or a parameterless constructor. 
Purpose:
It's used to create an object of a class without providing any initial values.
If you don't define any constructor in your class, the Java compiler automatically provides a default no-argument constructor.
However, if you define any other constructor (e.g., with arguments), the compiler will not provide a default constructor automatically.

Qs7. When do we need Constructor Overloading?
Ans: Constructor overloading is useful in Java when you want to create objects of a class in different ways, depending on the information available or the desired initial state.
Here are a few scenarios where constructor overloading shines:
Different initialization options:
You can provide multiple constructors with different parameter lists, allowing the user to initialize an object with different combinations of data.
Default values:
You can have one constructor with all parameters and others with fewer parameters, using default values for the missing ones. This simplifies object creation when some values are not always required.
Flexibility:
Constructor overloading enhances the flexibility and usability of your classes by accommodating various object creation scenarios.

Qs8. What is default constructor Explain with an example.
Ans: In Java, a default constructor is a constructor that is automatically generated by the compiler if no other constructors are explicitly defined in a class. It has no arguments (also known as a no-arg constructor) and initializes the object's instance variables to their default values.
Ex: 
class Car {
    String color;
    int year;

    // This is the default constructor automatically created by the compiler
    // public Car() { 
    //     color = null; // String defaults to null
    //     year = 0;     // int defaults to 0
    // }
}

public class Main {
    public static void main(String[] args) {
        Car myCar = new Car(); // Default constructor is called here

        System.out.println("Color: " + myCar.color); // Output: Color: null
        System.out.println("Year: " + myCar.year);   // Output: Year: 0
    }
}

Explanation:
Class Car:
This class has two instance variables, color of type String and year of type int.
No explicit constructor:
There's no constructor explicitly defined in the Car class.
Default constructor creation:
Because no constructor is provided, the Java compiler automatically generates a default constructor with no arguments. This constructor initializes the color to null and year to 0, which are the default values for String and int data types respectively.
Object creation:
In the Main class, a Car object is created using new Car(). This calls the default constructor, which initializes the color and year fields to their default values.
Output:
The code prints the values of color and year, demonstrating that they have been initialized to their default values.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Qs1. What is Encapsulation in Java? Why is it called Data hiding?
Ans: Encapsulation in Java is a fundamental concept in Object-Oriented Programming (OOP) that refers to the bundling of data (attributes) and the methods (functions) that operate on that data into a single unit, known as a class. 
This concept is achieved by using access modifiers like:
public: accessible from everywhere
private: accessible only within the same class
protected: accessible within the same package and subclasses
Why is it called Data hiding?
Encapsulation is often referred to as data hiding because it restricts direct access to the internal state (data members) of an object from outside the class. Instead, controlled access to the data is provided through getter and setter methods.
This approach offers several benefits:
Security: Protects data from unauthorized access and modification.
Modularity: Improves code organization, making it easier to maintain and understand.
Flexibility: Allows internal implementation details to be changed without affecting other parts of the application.

Qs2. What are the important features of Encapsulation?
Ans: Encapsulation is a fundamental concept in object-oriented programming (OOP) that involves bundling data (attributes) and the methods (behaviors) that operate on that data into a single unit, known as a class. This concept provides several important features in Java:
1. Data Hiding:
Access Modifiers:
Encapsulation is achieved using access modifiers like private, protected, and public. By declaring class members (variables and methods) as private, you restrict direct access from outside the class. This protects the data from unauthorized modification and ensures data integrity.
Controlled Access:
To access or modify private data, you provide public methods known as getters (accessors) and setters (mutators). This allows you to control how the data is accessed and modified, potentially including validation checks.
2. Modularity and Code Reusability:
Encapsulation promotes modularity
by breaking down complex systems into smaller, more manageable units (classes). Each class encapsulates its own data and behavior, making it easier to understand, maintain, and reuse in different parts of the application or even other projects.
Encapsulation hides the internal implementation details of a class.
This means you can change the implementation of a class without affecting the code that uses it, as long as the public interface remains the same.
3. Flexibility and Maintainability:
Encapsulation allows for easier code maintenance and updates.
Since the internal details of a class are hidden, you can modify them without impacting other parts of your application. This makes it easier to add new features, fix bugs, and adapt to changing requirements.
Encapsulation allows you to enforce business rules and constraints
within your classes. By controlling access to data through getters and setters, you can validate inputs and ensure that the data remains in a consistent state.

Qs3. What are getter and setter methods in Java Explain with an example.
Ans: Getter and setter methods in Java are used to control access to the fields (variables) of a class. They allow you to retrieve (get) and modify (set) the values of private fields in a controlled manner.
Getter Method:
A getter method is used to retrieve the value of a private field.
It starts with the keyword get, followed by the variable name with the first letter capitalized.
It returns the value of the private field.
Setter Method:
A setter method is used to modify the value of a private field.
It starts with the keyword set, followed by the variable name with the first letter capitalized.
It takes a parameter of the same data type as the private field and assigns the parameter value to the field.

Qs4. What is the use of this keyword explain with an example.
Ans: In Java, the this keyword is a reference to the current object within a method or constructor. It has several uses:
1. Referring to Instance Variables:
When you have a parameter or local variable with the same name as an instance variable, this helps differentiate between them.
class Person {
    int age;

    public Person(int age) {
        this.age = age; // "this.age" refers to the instance variable, "age" refers to the parameter
    }
}
2. Invoking Current Class Methods:
You can use this to call a method of the current object.
class Counter {
    int count;

    public void increment() {
        this.count++; // Equivalent to just "count++;"
    }

    public void printCount() {
        System.out.println("Count: " + this.count);
    }
}
3. Constructor Chaining:
You can use this to call another constructor of the same class from within a constructor.
class Rectangle {
    int width;
    int height;

    public Rectangle() {
        this(1, 1); // Calls the constructor below with default values
    }

    public Rectangle(int width, int height) {
        this.width = width;
        this.height = height;
    }
}
4. Returning the Current Object:
You can use this to return the current object from a method. This is often used in builder pattern implementations.
class PersonBuilder {
    String name;
    int age;

    public PersonBuilder setName(String name) {
        this.name = name;
        return this; // Returns the PersonBuilder object itself
    }

    public PersonBuilder setAge(int age) {
        this.age = age;
        return this;
    }

    public Person build() {
        return new Person(name, age);
    }
}

Qs5.  What  is the advantage of Encapsulation?
Ans: Encapsulation in Java offers several advantages:
Data Hiding:
It restricts direct access to an object's internal state (variables) from other classes. This is achieved using access modifiers like private. Only public methods (getters and setters) provided by the class can access and modify the data. This protects the data from unintended modifications and ensures data integrity.
Increased Flexibility:
You can make the variables of the class read-only or write-only depending on your requirements. This gives you more control over how the data is accessed and modified.
Code Reusability:
Encapsulated code is easier to reuse in other projects or parts of your application. Since the internal workings are hidden, you can use the class without worrying about its implementation details.
Improved Maintainability:
Encapsulation makes code easier to maintain and update. If you need to change the implementation of a class, you can do so without affecting the code that uses it, as long as the public interface remains the same.
Enhanced Security:
By hiding the internal state of objects, encapsulation helps prevent unauthorized access and manipulation of data, making your code more secure.

Qs6. How to achieve encapsulation in java? Given an example.
Ans: Encapsulation in Java is achieved by:
Declaring instance variables as private: This prevents direct access to the variables from outside the class.
Providing public getter and setter methods: These methods allow controlled access to the private variables.
class Person {
    private String name;
    private int age;

    // Getter for name
    public String getName() {
        return name;
    }

    // Setter for name
    public void setName(String name) {
        this.name = name;
    }

    // Getter for age
    public int getAge() {
        return age;
    }

    // Setter for age
    public void setAge(int age) {
        if (age >= 0) {
            this.age = age;
        } else {
            System.out.println("Age cannot be negative.");
        }
    }
}

public class Main {
    public static void main(String[] args) {
        Person person = new Person();
        person.setName("Alice");
        person.setAge(30);

        System.out.println("Name: " + person.getName());
        System.out.println("Age: " + person.getAge());
    }
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Qs1. Why do we need static keyword in java explain with an example?
Ans: The static keyword in Java is used to indicate that a member (variable or method) belongs to the class itself, rather than to any specific instance of the class. 
Here are a few reasons why we need the static keyword:
Shared data:
Static variables are shared among all instances of a class. This is useful for storing values that are common to all objects of a class, like a counter or a constant value.
Memory efficiency:
Since only one copy of a static variable exists in memory, regardless of the number of instances created, it helps in efficient memory usage.
Utility methods:
Static methods can be called directly on the class, without needing to create an object of that class. These are often used for utility functions, like mathematical calculations or string manipulations

Qs2. What is class loading and how does the Java program actually executes?
Ans: Class loading is the process of loading the.class files from the file system into the Java Virtual Machine (JVM). The JVM loads the classes when they are needed, rather than at startup. This allows for more flexibility and control over class loading. When a Java program executes, the following steps occur: the JVM loads the initial class (usually the main class), initializes the classes, allocates memory for objects, sets up the method invocation mechanism, and establishes the execution environment. The program then executes, and the JVM manages memory and performs garbage collection as needed.  

Qs3. Can we mark a local variable as static.
Ans: No, you cannot mark a local variable as static in Java.
Here's why:
Scope:
Local variables are declared within a method or a block and their scope is limited to that block. Static variables, on the other hand, belong to the class and their scope is across the entire class.
Lifetime:
Local variables are created when the block is entered and destroyed when the block exits. Static variables are created when the class is loaded and destroyed when the class is unloaded.
Purpose:
Local variables are used for temporary storage within a method or block. Static variables are used for data that needs to be shared across all instances of a class or for constants.

Qs4. Why is the static block executed before the main method in java?
Ans: In Java, the static block is executed before the main method because of the way the Java Virtual Machine (JVM) loads and initializes classes. Here's why:
Class Loading and Initialization:
Loading:
When the JVM loads a class, it reads the class file and creates a representation of the class in memory.
Initialization:
After loading, the JVM initializes the class, which involves:
Static Initialization: This includes executing static blocks and initializing static variables. Static blocks are executed in the order they appear in the class file. 
Instance Initialization: This occurs when an object is created, and it involves executing instance blocks and initializing instance variables.
Why Static Blocks Execute First:
Preparation:
Static blocks are designed to initialize static members of the class. These members are often used by the class's methods and need to be ready before any methods are called.
Class-Level Operations:
Static blocks are typically used for class-level operations, such as setting up database connections, loading configuration files, or initializing static data structures. These operations are logically performed before any object of the class is created.
JVM Specification:
The Java Language Specification mandates that static initialization happens before any static method (including the main method) is called.

Qs5. Why is a static method also called a class method?
Ans: A static method in Java is also called a class method because it belongs to the class itself, not to any specific instance of the class. This means you can call a static method directly on the class, without creating an object of that class.
Here's why:
Class-level behavior:
Static methods represent actions or operations that are relevant to the class as a whole, rather than to individual objects. For example, a method to calculate the area of a circle might be a static method in a Circle class, as it doesn't depend on the specific attributes of any particular circle object.
Access without instantiation:
Since static methods don't require an object to be called, they are useful for utility functions, factory methods, or methods that access static variables within the class.
Direct association with the class:
The fact that static methods are associated with the class, not the object, reflects their nature as class-level operations.

Qs6. What is the use of static blocks in Java?
Ans: In Java, static blocks are used to initialize static members of a class. They are executed only once when the class is loaded into memory, before any instances of the class are created.
Common uses of static blocks:
Initializing static variables:
This is the most common use case. Static blocks provide a way to initialize static variables with complex logic or calculations that can't be done in a single line.
Performing one-time setup:
Static blocks can be used to perform any one-time setup operations that need to be done when the class is loaded, such as loading data from a file or establishing a database connection.
Calling static methods:
You can also call static methods from within a static block, which can be useful for performing initialization tasks that require the use of other static methods.

Qs7. Difference between static and Instance variables.
Ans: In Java, static and instance variables are two different types of variables with distinct characteristics:
Static Variables (Class Variables):
Belong to the class:
Static variables are associated with the class itself, not with any particular instance of the class. 
Shared among all instances:
All objects of the class share the same copy of the static variable.
Declared using the static keyword:
You declare a static variable by using the static keyword before the variable type.
Accessed using the class name:
You can access a static variable directly using the class name, without creating an object.
Initialized only once:
Static variables are initialized only once when the class is loaded into memory. 
Use case:
Static variables are useful for storing data that is common to all instances of a class, such as constants or shared counters.
Instance Variables (Non-Static Variables):
Belong to an object: Instance variables are associated with a specific instance of a class.
Unique to each instance: Each object of the class has its own copy of the instance variable.
Declared without the static keyword: You declare an instance variable without using the static keyword.
Accessed using an object reference: You can access an instance variable through a reference to the object.
Initialized when an object is created: Instance variables are initialized when an object of the class is created.
Use case: Instance variables are used to represent the state of an object, such as its attributes or properties. 