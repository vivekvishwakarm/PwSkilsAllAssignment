                                        Assign : Linear & Binary Search

Qs1. Given an array. Find the number X in the array. If the element is present, return the index of the element, else print "Element not found in array". Input the size of array, array from user and the element X from user. User Linear Search to find the element.
Code :
import java.util.*;
public class FindTheNumX {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		boolean isPresent = false;
		System.out.println("Enter the number of array elements: ");
		int num = sc.nextInt();
		int arr[] = new int[num];
		System.out.println("Enter the number, which you find in the array: ");
		int x = sc.nextInt();
		System.out.println("Enter the array element: ");
		for(int i = 0; i<num; i++){
		    arr[i] = sc.nextInt();
		}
		for(int i=0; i<num; i++) {
			if(arr[i] == x) {
				System.out.print("Find element index is: "+i);
				isPresent = true;
			}
		}
		if(isPresent==false) {
			System.out.println("Element not found in array");
		}
	}
}

Qs2. Given an array and an integer "target", return the last occurrence of "target" in the array. If the target is not present return -1;
Input1: arr[] = {1,1,1,2,3,4,4,5,6,6,6,6}, target = 4
Output : 6
Code:
public class LastOccurrence {
	// Defining the function
	public static int lastOcuurenceIndex(int[] arr, int target) {
		int index = -1;
		int len = arr.length;
		//We used there BinarySearch
		int start = 0;
		int end = len - 1;
		while(start<=end) {
			int mid = start + (end - start)/2;
			if(arr[mid]==target) {
				index = mid;
				start = mid + 1;	
			}else if(arr[mid]<target) {
				start = mid + 1;
			}else {
				end = mid -1;
			}
		}
		return index;
	}

	public static void main(String[] args) {
		int arr[] = {1,1,1,2,3,4,4,5,6,6,6,6};
		int target = 4;
	    //Calling function
		int lastIndex = lastOcuurenceIndex(arr,target);
		System.out.print("Last occurrence index is: "+lastIndex);	
	}
}

Qs3. Given a sorted binary array, efficiently count the total number of 1's in it.
Input1: arr[] = {0,0,0,0,1,1,1,1,1,1}; Output= 6
Code:
public class CountNumOfOne {
	public static void main(String[] args) {
		int arr[] = {0,0,0,0,1,1,1,1,1,1};
		int len = arr.length;
		int count = 0;
		//We use there Linear search for iterate all the elements
		for(int i = 0; i<len; i++) {
			if(arr[i] == 1) {
				count++;
			}
		}
		System.out.print("Number of 1's is: "+count);
	}
}


Qs4. Given a sorted integer array containing duplicates, count occurrences of a given number. if the element is not found in the array, report that as well.
Input: nums[] = {2,5,5,5,6,6,8,9,9,9}   target = 5
Output: Target 5 occurrence 3 Times
Code:
public class FindOccursTargetElem {
	public static void main(String[] args) {
		int nums[] = {2,5,5,5,6,6,8,9,9,9};
		int count = 0;
		int lenOfNums = nums.length;
		boolean isNoElement = false;
		int target = 5;
		// Traverse the loop (linear Search)
		for(int i=0; i<lenOfNums; i++) {
			if(nums[i] == target) {
				count++;
				isNoElement = true;
			}
		}
		if(isNoElement == false) {
			System.out.print("Target 5 occurs : "+count+" times");
		}else {
		    System.out.print("Target 5 occurs : "+count+" times");
		}
	}
}

Qs5.Given a positive integer num, return true if num is a perfect square or false otherwise.
A perfect square is an integer that is the square of an integer. In other word, it is the product of some integer with itself.
Example1: Input: Num = 16 Output: true
Code: 
public class IsNumPerfectSquOrNot {
	// defining the function
	public static boolean isNumPerfectSquOrNot(int num) {
		// We use there Binary Search
		int start = 0;
		int end = num;
		while(start<=end) {
			int mid = start + (end - start)/2;
			int value = mid * mid;
			if(num == value) {
			  return true;
			}else if(num < value) {
				end = mid - 1;
			}else {
				start = mid + 1;
			}
		}
		return false;
	}
	
	public static void main(String[] args) {
		int num = 16;
		//calling function
		boolean isPerfectSqu = isNumPerfectSquOrNot(num);
		if(isPerfectSqu == true) {
			System.out.print("Input Number is perfect square: "+isPerfectSqu);
		}else {
			System.out.print("Input Number is not perfect square: "+isPerfectSqu);
		}

	}
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                        Assignment: Sorting
Qs1. WAP to sort an array in descending order using bubble sort.
Input Array : {3,5,1,6,0}   Output: {6,5,3,1,0}
Code:
import java.util.Arrays;
public class DescSortUsingBubble {
	public static void main(String[] args) {
		int nums[] = {3,5,1,6,0};
		int len = nums.length;
		//Sort the array in descending using bubble sort
		for(int i = 0; i<len; i++) {
			for(int j = 0; j<len-1; j++) {
				//applying condition 
				if(nums[j]<nums[j+1]) {
					int temp = nums[j];
					nums[j] = nums[j+1];
					nums[j+1] = temp;
				}
			}
		}
		System.out.println(Arrays.toString(nums));
	}
}

Qs2. WAP to sort an array in descending order using selection sort
Input Array : {3,5,1,6,0}   Output: {6,5,3,1,0}
Code:
import java.util.Arrays;
public class DesSortUsingSelecion {
	public static void main(String[] args) {
		int[] arr= {3,5,1,6,0};
		int len = arr.length;
		//Logic part 
		for(int i=0; i<len; i++) {
			int max_ind = i;
			for(int j = i; j<len-1; j++) {
				if(arr[j]<arr[j+1]) {
					max_ind = j+1;
				}
			}
			if(max_ind != i) {
				int temp = arr[max_ind];
				arr[max_ind] = arr[i];
				arr[i] = temp;
			}
		}
		
		System.out.print(Arrays.toString(arr));
	}
}

Qs3. WAP to sort an array in descending order using insertion sort
Input Array : {3,5,1,6,0}   Output: {6,5,3,1,0}
Code:
import java.util.Arrays;
public class DesSortUsingInsertion {
	public static void main(String[] args) {
		int[] arr = {3,5,1,6,0};
		int len = arr.length;
		for(int i = 0; i<len; i++) {
			int j = i;
			while(j>0 && arr[j]>arr[j-1]) {
				int temp = arr[j];
				arr[j] = arr[j-1];
				arr[j-1] = temp;
				j--;
			}
		}
		System.out.print(Arrays.toString(arr));
	}
}

Qs4. Find out how many pass would be required to sort the following array in decreasing order using bubble sort.
Input Array {3,5,1,6,0}
Ans: 
3 iteration are required :
Original Array is {3,5,1,6,0}
In first iteration array is {5,3,6,1,0}
In second iteration array is {5,6,3,1,0}
In third iteration array is {6,5,3,1,0}

Qs5 Find out how many pass would be required to sort the following array in decreasing order using selection sort
Input Array {3,5,1,6,0}
Code:
3 iteration are required :
Original Array is {3,5,1,6,0}
In first iteration array is {6,5,1,3,0}
In second iteration array is {6,5,1,3,0}
In third iteration array is {6,5,3,1,0}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                 Assignment: Number System

Problem 1: Given a number, print its binary representation.
Input1: number = 5  Output1: 101
Input2: number = 10 Output2: 1010
Code:
public class DecimalToBinary {
	public static void main(String[] args) {
		int num = 10;
		  StringBuilder binary = new StringBuilder();
		while(num>0) {
			int rem = num % 2;
			binary.append(rem);
			num = num /2;
		}
		System.out.print(binary.reverse().toString());
	}
}

Problem2: Given a number 'n', predict whether it is a power of two or not.
Input1: n=15  Output1: false
Input2: n = 32 Output2: true
Code:
public class PowerOfTwo {	
    public static boolean isPowerOfTow(int n) {
        if(n<=0) {
        	return false;
        }
        while(n%2==0) {
        	n=n/2;
        }
        return n==1;
    }
	public static void main(String[] args) {
		int num = 32;
		//logic
		System.out.print(isPowerOfTow(num));
	}

}

Qs3. Given a number. Using bit manipulation, check whether it is odd or even.
Input: 8  Output: Even
Input: 3  Output: false
Code:
import java.util.Scanner;
public class OddEvenChecker {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a number: ");
        int num = scanner.nextInt();

        boolean isEven = (num & 1) == 0; // Check if the least significant bit is 0

        if (isEven) {
            System.out.println("Even");
        } else {
            System.out.println("Odd");
        }
    }
}

Qs4. Given a number, count the number of set bits in that number without using an extra space.
Note: bit '1' is also known as set bit.
Code:
public class BitCounting {
    public static int countSetBits(int n) {
        int count = 0;
        while (n != 0) {
            n &= (n - 1); // Clear the rightmost set bit
            count++;
        }
        return count;
    }

    public static void main(String[] args) {
        int number = 15; // Example number
        int setBitsCount = countSetBits(number);
        System.out.println("Number of set bits in " + number + " is: " + setBitsCount);
    }
}

Qs5. Given an interger array, duplicates are present in it in a way that all duplicates appear an even number of times except one which appears an odd number of times. Find that odd appearing element in linear time and without using any extra memory.
For Example,
Input: arr[] = {4,3,6,2,6,4,2,3,4,3,3}
Output: The odd occurring element is 4.
Code:
public class OddOccurrence {
    public static int findOddOccurrence(int[] arr) {
        int result = 0;
        for (int num : arr) {
            result ^= num;
        }
        return result;
    }

    public static void main(String[] args) {
        int[] arr = {4, 3, 6, 2, 6, 4, 2, 3, 4, 3, 3};
        int oddOccurrence = findOddOccurrence(arr);
        System.out.println("The odd occurring element is: " + oddOccurrence);
    }
}
